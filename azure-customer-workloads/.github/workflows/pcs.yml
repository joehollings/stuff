name: Deploy PCS Workloads
on:
  pull_request:
    paths: 
        - 'terraform/pcs/**'
  pull_request_target:
    types:
      - closed
    paths: 
        - 'terraform/pcs/**'

env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_DIRECTORY: "./terraform/pcs/"

jobs:
  terraform_plan:
    name: 'Terraform Plan'
    if: github.event_name == 'pull_request'
    runs-on: self-hosted
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_DIRECTORY }}

    steps:
      - uses: actions/checkout@v3
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: TFLint
        id: tflint
        uses: reviewdog/action-tflint@master
        with:
          level: info
          filter_mode: "nofilter"
          working_directory: ${{ env.TF_DIRECTORY}} # Optional. Change working directory
          reporter: github-pr-review # Optional. Change reporter
          fail_on_error: "false" # Optional. Fail action if errors are found

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ${{ env.TF_DIRECTORY }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary> Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform_apply:
    name: 'Terraform Apply'
    if: github.event.pull_request.merged == true
    runs-on: self-hosted
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_DIRECTORY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -input=false